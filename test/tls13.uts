% Tests for TLS 1.3

~ crypto

+ Read a TLS 1.3 session

= Reading TLS 1.3 test session (from draft-ietf-tls-tls13-vectors-00)
import binascii
from cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateNumbers
from cryptography.hazmat.backends import default_backend

def clean(s):
    return binascii.unhexlify(''.join(c for c in s if c.isalnum()))

clientHello1 = clean(""" 
         16030100ae010000 aa0303d9e9898df6
         3d43adbe64a2634f 0b63bcdc4019a3e5 26bc013a6042e05b
         14555c0000061301 130313020100007b 0000000b00090000
         06736572766572ff 01000100000a0008 0006001d00170018
         002800260024001d 002005efa94d13f5 adcd14219379d5a3
         7dbce4721d9294e5 72c6651aeb761838 815b002b0003027f
         12000d0020001e04 0305030603020308 0408050806040105
         0106010201040205 0206020202002d00 020101
         """)
t = TLS(clientHello1)

helloRetryRequest = clean("""
         160301000e060000 0a7f120006002800 020017
         """)
t = TLS(helloRetryRequest, tls_session=t.tls_session.mirror())

secp256r1_client_privkey = clean("""
         11fa48d153c917ff d89dff13140760a1
         36265d399fa9f10e 2d766d42a6c84e90
         """)
clientHello2 = clean(""" 
         16030100cf010000 cb0303d9e9898df6
         3d43adbe64a2634f 0b63bcdc4019a3e5 26bc013a6042e05b
         14555c0000061301 130313020100009c 0000000b00090000
         06736572766572ff 01000100000a0008 0006001d00170018
         0028004700450017 0041041e5a785f54 17fb18db42938435
         34a5c0ba6e744baa 6846d0b32f4e9ea3 922724a08f2adb09
         f071f81402e7fd8c a33b76abe1cd556f d3e8fe20e0fd2e82
         02f969002b000302 7f12000d0020001e 0403050306030203
         0804080508060401 0501060102010402 050206020202002d 00020101
         """)
t = TLS(clientHello2, tls_session=t.tls_session.mirror())
pubnum = t.tls_session.tls13_client_pubshares["secp256r1"].public_numbers()
privnum = EllipticCurvePrivateNumbers(pkcs_os2ip(secp256r1_client_privkey), pubnum)
privkey = privnum.private_key(default_backend())
t.tls_session.tls13_client_privshares["secp256r1"] = privkey

#secp256r1_server_privkey = clean("""
#         ff265d2062c70725 ca22513e1e6841ff
#         475e8a00421f0818 186edd1c0080cc6a
#         """)
serverHello = clean("""
         1603010073020000 6f7f1296ff693075
         d8465651a9c28773 f5496542206ba390 199b9c997545d9a1
         2666151301004900 2800450017004104 8a4d09cde58dbc04
         1955b9a41a43c169 6dc5429ffa96f9cd 194a863ac782f181
         59f072b4f610215d 86407dd7368b754a b2e64f2c1b3f9d45
         7c264e2b1781a36b
         """)
t = TLS(serverHello, tls_session=t.tls_session.mirror())

serverEncHS = clean("""
         170301029081de4f cfd700da4573d570
         5942f14a11e569aa 9aacc95260520102 6f74f2b2ad6abe08
         7b53a4940ff94208 9e02d3159b1c6f11 75d7fcb51abad6fd
         d4f7ff4af6590b47 16c1d90e1031e1a1 e32079f531108c6b
         9f79d6120319e0a3 73010e82d780a8f9 c3fdf8474840cdb6
         7e4943d3808a27cd 5d9375c766a95ef4 8393c235d83ad26a
         20628671793f75df aa0be78b11fed206 6506d19a769d9d32
         adc0437784994359 ef5e452609353670 1c46004cf6fc252e
         546e797238c73b94 b073461158301f78 1498917c32dc0ece
         658a53790c667397 f7744775c2bef907 b5f7d5677b2e57fe
         7c4bfd43c7ad1ee4 6fd400c3d3c3c05f e8775f055263e98a
         692b49a818d0f698 4400c1db2f429fa8 9fb61d523398e1d0
         2bc5c393027146c0 f326032d18cb8283 473f2b6d554df942
         c7b1a0050694c7b2 bf31a816f7ff77f1 d7db873dbb6e4646
         acabfa73c317a34c e6212a3469f549e6 cde71ab229a6f220
         acda60832b510663 02a23d02c734bd5e 71b04fb248ca47ba
         0c7b1fd28fee9b5d 86e6b1a6a2a1a43e 3831210519f54134
         c96486d11ef3125f 74969785690487e0 aa5c0a310ebf9d31
         95ec5543af8a6ffb 710eb0a90285960d c1ccdc10ecee9669
         9171e97eae526a17 205012ab6f262e44 31ae9a70ff2ed7bd
         966ef6bd4563f56a 7a14970dcabf97ae 7e4354db1ea27548
         c55c11542ad07bcd 6f47a7143b86c4e6 678ce7dc6d51a1b7
         75687644d6526efa 3c864f592819e7b7 f9f1bbc02ed8821a
         e66019b240b41f5e ebf9475069700030 7122f7c8a8d6c0da
         a264c63183238d72 0eacb86879fab9ba 8a673c51a52c8284
         75e3211223cd2238 bd8b8a934af3e4dd e10e788df23ad6d8
         51d68b78082ac667 a854356415e7858b e526307332990d8c
         c38a5dc4cfc22a2c a2bdd9126a2ce13d 7015264921
         """)
t = TLS(serverEncHS, tls_session=t.tls_session)

clientFinished = clean("""
         170301003543adad e592362412fb77d7
         28b181c01b77cd62 a661e4125e6f9851 826e418f4c292ec6
         3254e8b0342d65db 8a7f074eed527ea6 98a6
         """)
t = TLS(clientFinished, tls_session=t.tls_session.mirror())

clientRecord = clean("""
         17030100131ef5c9 e7205f31a1edf9b1
         3600fec1271e4f5d
         """)
t = TLS(clientRecord, tls_session=t.tls_session)

serverRecord = clean("""
         170301001350ff6e 907c508b6b191ff6
         094faf4c0b32d6a8
         """)
t = TLS(serverRecord, tls_session=t.tls_session.mirror())

alert = t.inner.msg[0]
assert(isinstance(alert, TLSAlert))
alert.level == 1 and alert.descr == 0
